{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript-dom-testing-with-mocha-grunt-chai-jquery","result":{"data":{"markdownRemark":{"id":"de1152a2-b81b-5307-b22b-b66bd30df2ad","html":"<p>I’d like to share my work on writing JavaScript DOM unit testing on a existing codebase in one of our Confluence plugins. </p>\n<p>The goals of this unit testing are as following:</p>\n<ul>\n<li>Simulate JavaScript and DOM as close as possible to actual browser environment</li>\n<li>Being able to easily integrate this to CI services</li>\n</ul>\n<h2 id=\"librariesframeworkstools-that-we-use\" style=\"position:relative;\"><a href=\"#librariesframeworkstools-that-we-use\" aria-label=\"librariesframeworkstools that we use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Libraries/Frameworks/Tools that We Use</h2>\n<ul>\n<li><a href=\"http://visionmedia.github.io/mocha/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocha</a> - JavaScript Test Framework</li>\n<li><a href=\"http://sinonjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SinonJS</a> - JavaScript Spies/Stubs/Mocks Framework</li>\n<li><a href=\"https://npmjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM</a> - Node Package Manager</li>\n<li><a href=\"http://bower.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bower</a> - Package Manager for the Web. It doesn’t dictate you to use CommonJS module system. Just include some JS/CSS/whatever.</li>\n<li><a href=\"http://phantomjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PhantomJS</a> - Headless Webkit Browser</li>\n<li><a href=\"http://gruntjs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Grunt</a> - Task-based JavaScript build tool</li>\n<li><a href=\"http://chaijs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chai</a> - JavaScript BDD-style assertion library</li>\n<li><a href=\"https://github.com/chaijs/chai-jquery\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chai-jquery</a> - Chai extension that provides a set of jQuery assertions (for DOM testing)</li>\n</ul>\n<h1 id=\"getting-things-done-from-nothing\" style=\"position:relative;\"><a href=\"#getting-things-done-from-nothing\" aria-label=\"getting things done from nothing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting things done from nothing…</h1>\n<h2 id=\"environment-setup\" style=\"position:relative;\"><a href=\"#environment-setup\" aria-label=\"environment setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environment setup</h2>\n<p>I’d like to document these steps for our own reference and install and configure <a href=\"https://npmjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NPM</a> on your machine. For OSX users that use <a href=\"http://brew.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HomeBrew</a>, just do <code class=\"language-text\">sudo brew install npm</code>.</p>\n<p>Also, make sure to install <code class=\"language-text\">bower</code> and <code class=\"language-text\">grunt-cli</code> globally on your node:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g grunt-cli bower</code></pre></div>\n<h2 id=\"project-setup\" style=\"position:relative;\"><a href=\"#project-setup\" aria-label=\"project setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Setup</h2>\n<h3 id=\"npm-project\" style=\"position:relative;\"><a href=\"#npm-project\" aria-label=\"npm project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NPM Project</h3>\n<p>For our project, this was a “traditional” javascript codebase, probably written before things like NPM or Bower become more mainstream today. So, a new nodejs setup can be configured by calling <code class=\"language-text\">npm init</code>, which will guide you to create <code class=\"language-text\">package.json</code>.</p>\n<p>My final <code class=\"language-text\">package.json</code> looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"confluence-scaffolding\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.9-SNAPSHOT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"grunt\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~0.4.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"grunt-mocha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~0.4.7\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"grunt-jsmin-sourcemap\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~1.10.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"grunt-contrib-watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~0.5.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"grunt-contrib-handlebars\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~0.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"grunt-contrib-clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~0.5.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Currently used only for BDD test using Mocha\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"grunt test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"install\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bower install\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All these <code class=\"language-text\">grunt-**</code> dependencies are Grunt task runners. Notice the <code class=\"language-text\">&quot;script&quot;</code> part? That means, if I type <code class=\"language-text\">npm install</code>, it will trigger <code class=\"language-text\">bower install</code> too. Make sure to run <code class=\"language-text\">npm install</code> to install those dependencies locally (you might want to disable the <code class=\"language-text\">bower install</code> part temporarily for the first time).</p>\n<h3 id=\"bower-project\" style=\"position:relative;\"><a href=\"#bower-project\" aria-label=\"bower project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bower Project</h3>\n<p>Bower can be initiated in similar manner. Just type <code class=\"language-text\">bower init</code> to get bower to help you to initialised <code class=\"language-text\">bower.json</code>. See below for mine:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"confluence-scaffolding-test\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.0.9-SNAPSHOT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"jquery\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~1.7.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"require-handlebars-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~0.7.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"requirejs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~2.1.9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"mocha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"chai\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~1.8.1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"chai-jquery\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~1.1.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"aui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://bitbucket.org/atlassian/aui-dist/get/master.zip\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sinonjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~1.7.3\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I want to control where Bower install these dependencies, instead of putting them into <code class=\"language-text\">bower_components</code> directory. So, I’ve also created <code class=\"language-text\">.bowerrc</code> and specify the location as following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"directory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You should probably run <code class=\"language-text\">bower install</code> after writing those. It will pull out all the assets to the corresponding directories.</p>\n<h3 id=\"configuring-grunt\" style=\"position:relative;\"><a href=\"#configuring-grunt\" aria-label=\"configuring grunt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring Grunt</h3>\n<p>Grunt can be configured within a file called <code class=\"language-text\">Gruntfile.js</code>. Here’s an example of mine:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">module.exports = function(grunt) <span class=\"token punctuation\">{</span>\n    grunt.initConfig(<span class=\"token punctuation\">{</span>\n        pkg<span class=\"token operator\">:</span> grunt.file.readJSON('package.json')<span class=\"token punctuation\">,</span>\n        'jsmin-sourcemap'<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            all<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                src<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    'forms<span class=\"token comment\">/**/</span>*.js'\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                dest<span class=\"token operator\">:</span> 'tests/scaffold-combined.min.js'<span class=\"token punctuation\">,</span>\n                destMap<span class=\"token operator\">:</span> 'tests/scaffold-combined.min.js.map'<span class=\"token punctuation\">,</span>\n                srcRoot<span class=\"token operator\">:</span> '../'\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        mocha<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                src<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    'tests/index.html'\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                    run<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        handlebars<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                amd<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                processName<span class=\"token operator\">:</span> function(filePath) <span class=\"token punctuation\">{</span>\n                    return filePath.replace(/^templates\\<span class=\"token comment\">//, '').replace(/\\.hbs$/, '');</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            all<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                files<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">\"lib/require-handlebars-plugin/hbs/templates.js\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tests/**/*.hbs\"</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            compileJs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>'forms<span class=\"token comment\">/**/</span>*.js'<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>'jsmin-sourcemap'<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            compileHandlebars<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"tests/**/*.hbs\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                tasks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>'handlebars'<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        clean<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            test<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                src<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token string\">\"tests/repeatingComponentTest/scaffold-combined.min.js\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"tests/repeatingComponentTest/scaffold-combined.min.js.map\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"lib/**\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"node_modules/**\"</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>);\n    grunt.loadNpmTasks('grunt-mocha');\n    grunt.loadNpmTasks('grunt-jsmin-sourcemap');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-handlebars');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n\n    grunt.registerTask('compile'<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>'jsmin-sourcemap'<span class=\"token punctuation\">,</span> 'handlebars'<span class=\"token punctuation\">]</span>);\n    grunt.registerTask('default'<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>'test'<span class=\"token punctuation\">]</span>);\n    grunt.registerTask('test'<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>'compile'<span class=\"token punctuation\">,</span> 'mocha'<span class=\"token punctuation\">]</span>);\n<span class=\"token punctuation\">}</span>;</code></pre></div>\n<p>On my initial version, I wrote that using <a href=\"http://coffeescript.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coffeescript</a>. Honestly, I like it. It was more readable, but I think it’s better to keep it as JS for now. <a href=\"http://gruntjs.com/getting-started\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://gruntjs.com/getting-started</a> has excellent documentation on how to use Grunt, I would strongly suggest for you to read that. But, I just want to highlight some of the reasons or explanations on the task configuration.</p>\n<ul>\n<li><code class=\"language-text\">jsmin-sourcemap</code> – Used to compile all of existing production source code into a single JS file, to make test easier and replicate what Atlassian do with the YUI compressor. One nice thing about this task is, it produces source map! See this <a href=\"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">blog</a> on what is source map and why it’s so damn cool.</li>\n<li><code class=\"language-text\">mocha</code> – Our mocha configuration. Note: This <code class=\"language-text\">grunt-mocha</code> <strong>is not</strong> for running mocha on NPM environment. It basically run mocha test within PhantomJS. We purposedly set the <code class=\"language-text\">run: false</code> due to the fact that we will trigger this on our <a href=\"http://requirejs.org/docs/whyamd.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AMD</a> loading in the code.</li>\n<li><code class=\"language-text\">handlebars</code> – <a href=\"http://handlebarsjs.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Handlebars</a> is a variant of MustacheJS, but with helpers and additional features. I use this to separate the mocked DOM, instead of bundling them into the JS code. I don’t want to keep pulling my hair later for unmanage codebase. Honestly, I can just interpret the mocked DOM as plaintext, but I might as well configure it as template because I thought that we might use that for future test anyway.</li>\n<li><code class=\"language-text\">watch</code> - A file watcher. It watched over on group of files. On any changes, it will trigger the selected Grunt task. I used this when writing the test. Just run <code class=\"language-text\">grunt watch</code>.</li>\n</ul>\n<h1 id=\"writing-the-tests\" style=\"position:relative;\"><a href=\"#writing-the-tests\" aria-label=\"writing the tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing the tests</h1>\n<h2 id=\"directory-structure\" style=\"position:relative;\"><a href=\"#directory-structure\" aria-label=\"directory structure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directory structure</h2>\n<p>See the directory structure here:</p>\n<ul>\n<li><code class=\"language-text\">index.html</code> - The main page entry for the Mocha test. I think I can probably make a single html entry for the test, and multiple JavaScript sources loaded via AMD to run the test. It’s more managable imo. As long as the JavaScript source does not pollute global context and override each other, it’s fine. </li>\n<li><code class=\"language-text\">index.js</code> - Main entry for <code class=\"language-text\">requirejs</code> AMD loading. This is where I define the configuration the require js too.</li>\n<li><code class=\"language-text\">repeatingComponentTest</code> - This is an example for a test suite. I bundled all the assets (mainly Handlebar templates and Mocha test in JavaScript) within their own directory. So, if I want to test featureB in the future, I’ll just create a directory called featureB and let AMD call the test from <code class=\"language-text\">index.js</code>.</li>\n</ul>\n<h2 id=\"configuring-amd-using-require-js\" style=\"position:relative;\"><a href=\"#configuring-amd-using-require-js\" aria-label=\"configuring amd using require js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring AMD using require js</h2>\n<h3 id=\"indexhtml\" style=\"position:relative;\"><a href=\"#indexhtml\" aria-label=\"indexhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.html</h3>\n<p>I tried to load everything using AMD loading, but I was unable to load Atlassian’s AUI, sinonjs and mocha. While AUI and sinonjs are not written as modules, I am not exactly understand why I can’t load mocha using AMD. Some people in the community reports the same thing. So, for those libraries, I load them manually via <code class=\"language-text\">&lt;script&gt;</code> tag within <code class=\"language-text\">index.html</code>.</p>\n<p>In the <code class=\"language-text\">index.html</code> file, I’ve also introduced a DOM element for all my test: <code class=\"language-text\">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</code>.</p>\n<h3 id=\"indexjs\" style=\"position:relative;\"><a href=\"#indexjs\" aria-label=\"indexjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js</h3>\n<p>See my requireJs configuration below. I think, you probably need to refer <a href=\"http://requirejs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RequireJS Documentation</a> itself if you’re not familiar with AMD or RequireJS.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">require<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    paths<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'jquery'</span>        <span class=\"token operator\">:</span> <span class=\"token string\">'../lib/jquery/jquery'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'underscore'</span>    <span class=\"token operator\">:</span> <span class=\"token string\">'../lib/underscore/underscore'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'chai'</span>          <span class=\"token operator\">:</span> <span class=\"token string\">'../lib/chai/chai'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'chai-jquery'</span>   <span class=\"token operator\">:</span> <span class=\"token string\">'../lib/chai-jquery/chai-jquery'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'handlebars'</span>    <span class=\"token operator\">:</span> <span class=\"token string\">'../lib/require-handlebars-plugin/hbs/handlebars'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'tpl'</span>           <span class=\"token operator\">:</span> <span class=\"token string\">'../lib/require-handlebars-plugin/hbs/templates'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'main-src'</span>    <span class=\"token operator\">:</span> <span class=\"token string\">'../'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    shim<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'underscore'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            exports<span class=\"token operator\">:</span> <span class=\"token string\">'_'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'jquery'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            exports<span class=\"token operator\">:</span> <span class=\"token string\">'$'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'chai-jquery'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chai'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'require'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chai-jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tpl'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require<span class=\"token punctuation\">,</span> chai<span class=\"token punctuation\">,</span> chaiJquery<span class=\"token punctuation\">,</span> $<span class=\"token punctuation\">,</span> tpl</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Globals mocha</span>\n    mocha<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        ui<span class=\"token operator\">:</span> <span class=\"token string\">'bdd'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'repeatingComponentTest/list-field.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mocha<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Two interesting things I want to highlight here.</p>\n<ul>\n<li><code class=\"language-text\">tpl</code> – is the template module for the Handlebars template. It is compiled by Grunt.</li>\n<li><code class=\"language-text\">require([&#39;repeatingComponentTest/list-field.js&#39;], function(require) {</code> – This block of code is where I can control on which test module I want to load for mocha test. The following <code class=\"language-text\">mocha.run()</code> is the reason why I disabled automatic <code class=\"language-text\">mocha.run()</code> from Grunt task.</li>\n</ul>\n<h3 id=\"sample-test\" style=\"position:relative;\"><a href=\"#sample-test\" aria-label=\"sample test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sample Test</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'require'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">require</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> chai <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        chaiJquery <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chai-jquery'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        tpl <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tpl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        expect <span class=\"token operator\">=</span> chai<span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">;</span>\n\n    chai<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>chaiJquery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Checkboxes within {repeating-data}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'With fresh Scaffolding metadata'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Should have single &lt;ul> element within the first checkbox collection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>tpl<span class=\"token punctuation\">[</span><span class=\"token string\">'tests/repeatingComponentTest/checkboxesWithinRepeatingData-withoutExistingData'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">var</span> repeatingField <span class=\"token operator\">=</span> <span class=\"token constant\">AJS</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scaffold-data-add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">closest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".scaffold-data-looping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">scaffold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> spyOnAddLinkClick <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span>repeatingField<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onAddLinkClick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> spyInitScaffoldOnElement <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span>repeatingField<span class=\"token punctuation\">,</span> <span class=\"token string\">\"initScaffoldOnElement\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token constant\">AJS</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scaffold-data-add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spyOnAddLinkClick<span class=\"token punctuation\">.</span>calledOnce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spyInitScaffoldOnElement<span class=\"token punctuation\">.</span>calledOnce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scaffold-data-content span[sd-parent=\"REP.0\"] ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can read more on the excellent <a href=\"http://visionmedia.github.io/mocha/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocha Documentation</a> itself. A few things that I want to highlight from this:</p>\n<ul>\n<li>Always use <code class=\"language-text\">&quot;use strict&quot;;</code> whenever possible in your JavaScript code. Enabling strict mode should be a default thing to do, unless you’re writing some hacky stuff and know what you’re doing. From my experience, global variable pollution is one of the biggest problem I had so far on maintaining legacy code. Easily avoidable with strict mode.</li>\n<li>I used CommonJS style within RequireJS. For eg: <code class=\"language-text\">var chai = require(&#39;chai&#39;)</code></li>\n</ul>\n<h3 id=\"writing-test--some-tips\" style=\"position:relative;\"><a href=\"#writing-test--some-tips\" aria-label=\"writing test  some tips permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Test • Some Tips</h3>\n<ul>\n<li>Test it on Google Chrome browser, before running <code class=\"language-text\">grunt test</code> to test it on PhantomJS. Make debugging a hell lot easier.</li>\n<li>If you’re making actual AJAX call from <code class=\"language-text\">file:</code> location, Chrome won’t like it. Start chrome with <code class=\"language-text\">-allow-file-access-from-files</code> parameter if you need to override that.</li>\n<li>Use inline <code class=\"language-text\">debugger</code> and <code class=\"language-text\">console.log(...)</code> for debugging.</li>\n<li>Need to make trivial changes on the JS file without keep switching application? Just write it in Google Chrome debugger itself. They have live code / html editing.</li>\n</ul>\n<hr>\n<blockquote>\n<p>ps: I’m on leave writing this blog post from my hotel. The actual code base is still on pull request for peer review. I will probably update this blog post again.</p>\n</blockquote>","fields":{"slug":"/posts/javascript-dom-testing-with-mocha-grunt-chai-jquery","tagSlugs":["/tag/functional-programming/","/tag/javascript/","/tag/scala/"]},"frontmatter":{"date":"2014-01-05T17:28:42","description":"I'd like to share my work on writing JavaScript DOM unit testing on a existing codebase in one of our Confluence plugins.","tags":["functional programming","javascript","scala"],"title":"JavaScript DOM Testing With Mocha + Grunt + Chai jQuery","socialImage":"/media/1500x500.jpeg"}}},"pageContext":{"slug":"/posts/javascript-dom-testing-with-mocha-grunt-chai-jquery"}}}