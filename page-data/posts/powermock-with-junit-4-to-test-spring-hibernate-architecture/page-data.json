{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/powermock-with-junit-4-to-test-spring-hibernate-architecture","result":{"data":{"markdownRemark":{"id":"d2290dc1-26da-5d5b-ace8-0cc48c70326b","html":"<p>I’ve been working on developing this webapp project. Basically, we break the logical parts of the code into entity layer, service layer and UI layer. The data structure is not that complex, so we thought that we use Hibernate ORM to do its magic. All the plumbing works between these layers were managed via Spring dependency injection.</p>\n<p>We use Vaadin (built on top GWT) as our presentation layer where I’ve tried to enforce supervising view controller design pattern for better view and the associated view controller separation. I hope, this will make unit and integration testing easier in the future.</p>\n<p>Now, I have taken the approach where I create the application without unit test, simply because we need to deliver the application for prelimanary review in shortest amount of time. So now, I’m starting to get a little bit serious on unit testing the components in the application.</p>\n<p>For my testing requirement, I am planning to use JUnit 4 that play nicely with Spring frameworks. But, there are things that are still coupled between service and presentation layer, for example.</p>\n<p>To be more specific, the web presentation layer will automatically capture the logged in user details (including things like IP address and web browser details). We need a mocking framework to work with current JUnit assertion tests.</p>\n<p>I have reviewed some awesome Java mocking libraries such as <a href=\"http://easymock.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EasyMock</a> and <a href=\"https://code.google.com/p/mockito/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mockito</a>, but I found the best of mocking libraries called: <a href=\"https://code.google.com/p/powermock/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PowerMock</a>.</p>\n<p>What really nice for <code class=\"language-text\">PowerMock</code> is (taken directly from their website):</p>\n<blockquote>\n<p>PowerMock uses a custom classloader and bytecode manipulation to enable <strong>mocking of static methods</strong>, constructors, final classes and methods, private methods, removal of static initializers and more…</p>\n</blockquote>\n<p>So, I can mock my static method to retrieve the logged in user information with just 2 simple line of code:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> currentlyLoggedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Some dummy user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">mockStatic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringSecurityHelper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringSecurityHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span>currentlyLoggedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>However, PowerMock does not play nicely with <code class=\"language-text\">SpringJUnit4ClassRunner.class</code> JUnit runner. Even though PowerMock tried to mitigate this problem by bootstraping JUnit rule  <a href=\"https://code.google.com/p/powermock/wiki/PowerMockRule\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PowerMockRule</a>, Hibernate does not like this. I suspect because Hibernate relies on on <a href=\"http://cglib.sourceforge.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CGLib</a> to create some proxies to the entity classes by manipulating bytecode during runtime, which exactly what PowerMock do. If you’re interested on sample code, somebody wrote a blog post on how to do that <a href=\"http://www.jayway.com/2010/12/28/using-powermock-with-spring-integration-testing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.jayway.com/2010/12/28/using-powermock-with-spring-integration-testing/</a>. I think, if you’re not using Hibernate, it’s a really nice, clean way of writing a unit test.</p>\n<p>So, ultimately, what I did was to run the JUnit test with <code class=\"language-text\">PowerMockRunner.class</code>, but manually initiate the Spring context on <code class=\"language-text\">@Before</code> method. It works beautifully.</p>\n<p>I wrote a simple example below to demonstrate what I did on actual code.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PowerMockRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@PrepareForTest</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">SpringSecurityHelper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JUnitWithPowermock</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> SPRING_APPLICATION_CONTEXT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">\"src/main/webapp/WEB-INF/root-context.xml\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">DocumentService</span> documentService<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> currentlyLoggedUser<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token annotation punctuation\">@Before</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ApplicationContext</span> appContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span>SPRING_APPLICATION_CONTEXT_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdocumentService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalService</span><span class=\"token punctuation\">)</span> appContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"documentService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tcurrentlyLoggedUser <span class=\"token operator\">=</span> <span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">when</span><span class=\"token punctuation\">(</span>currentlyLoggedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummy@test.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">when</span><span class=\"token punctuation\">(</span>currentlyLoggedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A Dummy User\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">when</span><span class=\"token punctuation\">(</span>currentlyLoggedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getRole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Role</span><span class=\"token punctuation\">.</span>INFORMATION_MANAGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">when</span><span class=\"token punctuation\">(</span>currentlyLoggedUser<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token function\">mockStatic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringSecurityHelper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringSecurityHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenReturn</span><span class=\"token punctuation\">(</span>currentlyLoggedUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@Test</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testCreateDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Document</span> doc <span class=\"token operator\">=</span> documentService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoice 123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invoice 123456\"</span><span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mocked user should be automatically captured\"</span><span class=\"token punctuation\">,</span> currentlyLoggedUser<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/powermock-with-junit-4-to-test-spring-hibernate-architecture","tagSlugs":["/tag/mock/","/tag/java/"]},"frontmatter":{"date":"2013-11-20T17:28:42","description":"I've been working on developing this webapp project. Basically, we break the logical parts of the code into entity layer, service layer and UI layer. The data structure is not that complex, so we thought that we use Hibernate ORM to do its magic. All the plumbing works between these layers were managed via Spring dependency injection.","tags":["mock","java"],"title":"Powermock with JUnit 4 to Test Spring+Hibernate Architecture","socialImage":"/media/1500x500.jpeg"}}},"pageContext":{"slug":"/posts/powermock-with-junit-4-to-test-spring-hibernate-architecture"}}}