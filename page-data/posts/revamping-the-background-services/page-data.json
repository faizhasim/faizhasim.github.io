{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/revamping-the-background-services","result":{"data":{"markdownRemark":{"id":"fa672fc4-dedc-5776-b73f-09aa98b89aab","html":"<p>I have been assigned a job to improve the way the background services work. Most of them are background schedulers and all of them are implemented using Java.</p>\n<p>I have not found a proper solution yet, but I’m listing down all the challenges that I encounter when designing the solution for it:</p>\n<ol>\n<li><strong>Multi-tenanted services</strong>\nIn which the configuration can change dynamically during runtime. For example, one of the email notification services may consists of different repository settings.\nAt the moment, an ExecutorService is assigned to a particular email notification repository. Thus, if the settings for a  particular repository is updated, the corresponding ExecutorService is restarted. (At that time we think it makes sense not to manually handle all the Futures and use a single ExecutorService. Moreover, if you don’t manually purge the ThreadPoolExecutor, you will have memory leaks.)</li>\n<li>Different <strong>behaviour</strong> on the services. Some of them simply do some processing on a fix interval, in which past jobs are processed. There jobs that need more accuracy, so we actually manually planned for the execution in the future.</li>\n<li>At the moment, it’s possible for multiple services on multiple repositories to be scheduled at the same time. This could easily starve the CPU when that happens.</li>\n</ol>\n<h3 id=\"just-throwing-out-some-ideas-for-the-solution\" style=\"position:relative;\"><a href=\"#just-throwing-out-some-ideas-for-the-solution\" aria-label=\"just throwing out some ideas for the solution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Just throwing out some ideas for the solution.</h3>\n<ul>\n<li>\n<p>Should 1 service is managed by 1 ExecutorService instead of 1 ExecutorService per repository?</p>\n<p>If yes, Futures must be manually managed.\n</p>\n</li>\n<li>Assume 1 ExecutorService per repository, we can reduce the impact of issue 3, by “pausing” certain ExecutorServices to give a breathing room for the CPU to process others. I think this is not gonna work. I can’t figure out when to “pause”  on which ExecutorService, and likewise for “resuming” the ExecutorService.</li>\n<li>Should we rely on a master ExecutorService, similar to Grand Central Dispatch in OSX? We can archive this using Hazelcast in JavaWorld. Problem is, there’s no ScheduledExecutorService for Hazelcast. Going this path probably means, create a local ScheduledExecutorService just to submit the jobs to Hazelcast.</li>\n</ul>","fields":{"slug":"/posts/revamping-the-background-services","tagSlugs":["/tag/concurrency/","/tag/java/"]},"frontmatter":{"date":"2012-08-12T17:28:42","description":"I have been assigned a job to improve the way the background services work. Most of them are background schedulers and all of them are implemented using Java.","tags":["concurrency","java"],"title":"Revamping the background services","socialImage":"/media/1500x500.jpeg"}}},"pageContext":{"slug":"/posts/revamping-the-background-services"}}}